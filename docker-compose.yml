version: "3.9"
services:
  app:
    image: golang:1.21-alpine
    #build:
      #context: .
      #dockerfile: app.Dockerfile
      #dockerfile: dev.Dockerfile
    volumes:
      - .:/web
    ports:
      - '3000:3000'
      - '5000:5000'
    #environment:
      #- DB_MAX_CONNECTION=200
    working_dir: /web
    # for now, we will run the code manually using `docker compose exec`
    command: tail -f /dev/null
    #command: /app/binary
    # resource limitation definitions. reference: https://docs.docker.com/compose/compose-file/deploy/#resources
    deploy:
      resources:
        limits:
          cpus: '5'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 100M

  postgres:
    image: 'postgres:alpine'
    ports:
      - '5555:5432'
    volumes:
      - 'postgres_data:/var/lib/postgresql/data'
      - './postgres.conf:/var/lib/postgresql/data/postgresql.conf'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    # resource limitation definitions. reference: https://docs.docker.com/compose/compose-file/deploy/#resources
    deploy:
      resources:
        limits:
          cpus: '5'
          memory: 1G
        reservations:
          cpus: '0.75'
          memory: 750M

  tester:
    #image: grafana/k6
    build:
      context: .
      dockerfile: tester.Dockerfile
    ports:
      - '5665:5665'
    # resource limitation definitions. reference: https://docs.docker.com/compose/compose-file/deploy/#resources
    entrypoint: ""
    command: tail -f /dev/null
    working_dir: /web
    volumes:
      - .:/web
    deploy:
      resources:
        limits:
          cpus: '5'
          memory: 2G
        reservations:
          cpus: '0.75'
          memory: 750M

volumes:
  postgres_data:
